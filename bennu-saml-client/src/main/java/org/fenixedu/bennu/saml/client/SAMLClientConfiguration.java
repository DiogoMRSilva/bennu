package org.fenixedu.bennu.saml.client;

import org.fenixedu.commons.configuration.ConfigurationInvocationHandler;
import org.fenixedu.commons.configuration.ConfigurationManager;
import org.fenixedu.commons.configuration.ConfigurationProperty;

public class SAMLClientConfiguration {

    @ConfigurationManager(description = "Bennu SAML Client Configuration")
    public static interface ConfigurationProperties {

        @ConfigurationProperty(key = "saml.enabled", defaultValue = "false", description = "Whether the SAML client is enabled")
        public Boolean samlEnabled();

        @ConfigurationProperty(key = "saml.keystorePath", description = "Where the keystore for SAML is")
        public String keystorePath();

        @ConfigurationProperty(key = "saml.keystorePassword", description = "The Password for SAML keystore")
        public String keystorePassword();

        @ConfigurationProperty(key = "saml.privateKeyPassword", description = "The Password for SAML private key in the keystore")
        public String privateKeyPassword();

        @ConfigurationProperty(key = "saml.identityProviderMetadataPath", description = "The path to the identity provider metadata")
        public String identityProviderMetadataPath();

        @ConfigurationProperty(key = "saml.serviceProviderMetadataGenerationDestinationPath", description = "The path where to store the automatically generated service provider metadata with only one assertion consumer service")
        public String serviceProviderMetadataGenerationDestinationPath();

        @ConfigurationProperty(key = "saml.serviceProviderFinalMetadataLocation", description = "The path to the final metadata(with all the possible callback/AssertionConsumerService), it probably needs to be generated by hand")
        public String serviceProviderFinalMetadataPath();

        @ConfigurationProperty(key = "saml.serviceProviderEntityId", description = "The id we want this service to have in the SAML")
        public String serviceProviderEntityId();

        @ConfigurationProperty(key = "saml.callbackUrl", description = "The url to where the client is redirected to after logging in the SAML identity provide")
        public String callbackUrl();
    }

    public static ConfigurationProperties getConfiguration() {
        return ConfigurationInvocationHandler.getConfiguration(ConfigurationProperties.class);
    }

}
